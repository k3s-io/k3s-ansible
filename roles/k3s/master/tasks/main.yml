---

- name: Copy K3S environment file
  ansible.legacy.template:
    src: "k3s.service.env.j2"
    dest: "{{ k3s_systemd_dir }}/k3s.service.env"
    owner: root
    group: root
    mode: 0644
  notify: Restart K3S service

- name: Copy K3S environment file with agent token
  ansible.legacy.template:
    src: "k3s.service.env.agent.j2"
    dest: "{{ k3s_systemd_dir }}/k3s.service.env.agent"
    owner: root
    group: root
    mode: 0644
  notify: Restart K3S service
  when: k3s_apiserver_token_agent is defined

- name: Clean previous runs of k3s-init
  ansible.legacy.systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: Clean previous runs of k3s-init
  ansible.legacy.command: systemctl reset-failed k3s-init
  failed_when: false
  changed_when: false
  args:
    warn: false  # The ansible systemd module does not support reset-failed

- name: Init cluster inside the transient k3s-init service
  ansible.legacy.command:
    cmd: "systemd-run -p RestartSec=2 \
            -p Restart=on-failure \
            -p EnvironmentFile={{ k3s_systemd_dir }}/k3s.service.env \
            -p EnvironmentFile=-{{ k3s_systemd_dir }}/k3s.service.env.agent \
            --unit=k3s-init \
            k3s server {{ k3s_server_args_init }}"
    creates: "{{ k3s_systemd_dir }}/k3s.service"
  args:
    warn: false  # The ansible systemd module does not support transient units

- name: Verification
  block:
    - name: Verify that all nodes actually joined (check k3s-init.service if this fails)
      ansible.legacy.command:
        cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['master'] | length)
      retries: 30
      delay: 10
      changed_when: false
  always:
    - name: Kill the temporary service used for initialization
      ansible.legacy.systemd:
        name: k3s-init
        state: stopped
      failed_when: false

- name: Copy K3S service file
  ansible.legacy.template:
    src: "k3s.service.j2"
    dest: "{{ k3s_systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644
  notify: Restart K3S service

- name: Create kubectl symlink
  ansible.legacy.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  ansible.legacy.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Create directory .kube
  ansible.legacy.file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  ansible.legacy.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="
  changed_when: false

- name: Edit default cluster apiserver endpoint
  ansible.legacy.command:
    cmd: "k3s kubectl config \
            set-cluster default \
            --server=https://{{ k3s_apiserver_endpoint }}:6443 \
            --kubeconfig ~{{ ansible_user }}/.kube/config"
  changed_when: false

- name: Extract agent-token
  block:
    - name: Wait for agent-token
      ansible.legacy.wait_for:
        path: "{{ k3s_data_dir }}/server/agent-token"
    - name: Register agent-token file access mode
      ansible.legacy.stat:
        path: "{{ k3s_data_dir }}/server/agent-token"
      register: p
    - name: Change file access agent-token
      ansible.legacy.file:
        path: "{{ k3s_data_dir }}/server/agent-token"
        mode: "g+r,o+r"
    - name: Read agent-token from master
      ansible.legacy.slurp:
        path: "{{ k3s_data_dir }}/server/agent-token"
      register: agent_token
    - name: Store Master agent-token
      ansible.legacy.set_fact:
        token: "{{ agent_token.content | b64decode | regex_replace('\n', '') }}"
    - name: Restore agent-token file access
      ansible.legacy.file:
        path: "{{ k3s_data_dir }}/server/agent-token"
        mode: "{{ p.stat.mode }}"
  when: k3s_apiserver_token_agent is not defined

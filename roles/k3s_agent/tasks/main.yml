---
- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_agent_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: not ansible_check_mode and k3s_agent_version_output.rc == 0
  ansible.builtin.set_fact:
    k3s_agent_installed_version: "{{ k3s_agent_version_output.stdout_lines[0].split(' ')[2] }}"

# If airgapped, all K3s artifacts are already on the node.
# We should be downloading and installing the newer version only if we are in one of the following cases :
#   - we couldn't get k3s installed version in the first task of this role
#   - the installed version of K3s on the nodes is older than the requested version in ansible vars
- name: Download artifact only if needed
  when: not ansible_check_mode and airgap_dir is undefined and ( k3s_agent_version_output.rc != 0 or k3s_agent_installed_version is version(k3s_version, '<') )
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary
      # For some reason, ansible-lint thinks using enviroment with command is an error
      # even though its valid https://ansible.readthedocs.io/projects/lint/rules/inline-env-var/#correct-code
      ansible.builtin.command: # noqa inline-env-var
        cmd: /usr/local/bin/k3s-install.sh
      # Ensures that extra_install_envs are combined with required env vars
      environment: >-
        {{ extra_install_envs | combine({
          "INSTALL_K3S_SKIP_START": "true",
          "INSTALL_K3S_SYSTEMD_DIR": systemd_dir,
          "INSTALL_K3S_VERSION": k3s_version,
          "INSTALL_K3S_EXEC": "agent"
        }) }}
      changed_when: true

- name: Setup optional config file
  when: agent_config_yaml is defined
  block:
    - name: Make config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory
    - name: Copy config values
      # noqa var-naming[no-role-prefix]
      ansible.builtin.copy:
        content: "{{ agent_config_yaml }}"
        dest: "/etc/rancher/k3s/config.yaml"
        mode: "0644"
      register: _agent_config_result

- name: Get the token from the first server
  # noqa var-naming[no-role-prefix]
  ansible.builtin.set_fact:
    token: "{{ hostvars[groups[server_group][0]].token }}"

- name: Add service environment variables
  when: extra_service_envs is defined
  ansible.builtin.lineinfile:
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    line: "{{ item }}"
  with_items: "{{ extra_service_envs }}"

- name: Delete any existing token from the environment if different from the new one
  ansible.builtin.lineinfile:
    state: absent
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    regexp: "^K3S_TOKEN=\\s*(?!{{ token }}\\s*$)"

- name: Add the token for joining the cluster to the environment
  no_log: true # avoid logging the server token
  ansible.builtin.lineinfile:
    path: "{{ systemd_dir }}/k3s-agent.service.env"
    line: "{{ item }}"
  with_items:
    - "K3S_TOKEN={{ token }}"

- name: Modify ExecStart in k3s-agent.service to include API endpoint and extra args
  register: k3s_agent_service
  ansible.builtin.replace:
    path: "{{ systemd_dir }}/k3s-agent.service"
    regexp: '^ExecStart=\/usr\/local\/bin\/k3s \\\n\s*agent.*'
    replace: |
      ExecStart=/usr/local/bin/k3s \
          agent \
          --server https://{{ api_endpoint }}:{{ api_port }} \
          {{ extra_agent_args }}

- name: Enable and check K3s agent service
  ansible.builtin.systemd:
    name: k3s-agent
    daemon_reload: "{{ true if k3s_agent_service.changed else false }}"
    state: "{{ 'restarted' if (k3s_agent_service.changed or _agent_config_result.changed) else 'started' }}"
    enabled: true
